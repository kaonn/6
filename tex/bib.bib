@phdthesis{Hoffmann11,
  author = {Jan Hoffmann},
  title = {{Types with Potential: Polynomial Resource Bounds via Automatic Amortized Analysis}},
  school = {Ludwig-Maximilians-Universi{\"a}t M{\"u}nchen},
  year =  2011
}

@inproceedings{Hoffmann:2017:TAR:3009837.3009842,
 author = {Hoffmann, Jan and Das, Ankush and Weng, Shu-Chun},
 title = {Towards Automatic Resource Bound Analysis for OCaml},
 booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
 series = {POPL 2017},
 year = {2017},
 isbn = {978-1-4503-4660-3},
 location = {Paris, France},
 pages = {359--373},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/3009837.3009842},
 doi = {10.1145/3009837.3009842},
 acmid = {3009842},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Amortized Analysis, LP Solving, Resource Bound Analysis, Static Analysis, Type Inference, Type Systems},
} 

@inproceedings{Allen1987ANS,
  title={A non-type-theoretic semantics for type-theoretic language},
  author={Stuart Frazier Allen},
  year={1987}
}

@article{ALLEN2006428,
title = "Innovations in computational type theory using Nuprl",
journal = "Journal of Applied Logic",
volume = "4",
number = "4",
pages = "428 - 469",
year = "2006",
note = "Towards Computer Aided Mathematics",
issn = "1570-8683",
doi = "https://doi.org/10.1016/j.jal.2005.10.005",
url = "http://www.sciencedirect.com/science/article/pii/S1570868305000704",
author = "S.F. Allen and M. Bickford and R.L. Constable and R. Eaton and C. Kreitz and L. Lorigo and E. Moran",
keywords = "Martin-Löf type theory, Dependent intersection types, Union types, Polymorphic subtyping, Logic of events, Formal digital libraries, Computational type theory, Proofs as programs, Program extraction, Tactics",
abstract = "For twenty years the Nuprl (“new pearl”) system has been used to develop software systems and formal theories of computational mathematics. It has also been used to explore and implement computational type theory (CTT)—a formal theory of computation closely related to Martin-Löf's intuitionistic type theory (ITT) and to the calculus of inductive constructions (CIC) implemented in the Coq prover. This article focuses on the theory and practice underpinning our use of Nuprl for much of the last decade. We discuss innovative elements of type theory, including new type constructors such as unions and dependent intersections, our theory of classes, and our theory of event structures. We also discuss the innovative architecture of Nuprl as a distributed system and as a transactional database of formal mathematics using the notion of abstract object identifiers. The database has led to an independent project called the Formal Digital Library, FDL, now used as a repository for Nuprl results as well as selected results from HOL, MetaPRL, and PVS. We discuss Howe's set theoretic semantics that is used to relate such disparate theories and systems as those represented by these provers."
}

@article{Rahli:2019:BIC:3318168.3305261,
 author = {Rahli, Vincent and Bickford, Mark and Cohen, Liron and Constable, Robert L.},
 title = {Bar Induction is Compatible with Constructive Type Theory},
 journal = {J. ACM},
 issue_date = {April 2019},
 volume = {66},
 number = {2},
 month = apr,
 year = {2019},
 issn = {0004-5411},
 pages = {13:1--13:35},
 articleno = {13},
 numpages = {35},
 url = {http://doi.acm.org/10.1145/3305261},
 doi = {10.1145/3305261},
 acmid = {3305261},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bar induction, Coq, Nuprl, W types, choice sequences, computational type theory, intuitionistic logic, semantics},
}

@article{Levy:2006:CDC:1187995.1187999,
 author = {Levy, Paul Blain},
 title = {Call-by-push-value: Decomposing Call-by-value and Call-by-name},
 journal = {Higher Order Symbol. Comput.},
 issue_date = {December  2006},
 volume = {19},
 number = {4},
 month = dec,
 year = {2006},
 issn = {1388-3690},
 pages = {377--414},
 numpages = {38},
 url = {http://dx.doi.org/10.1007/s10990-006-0480-6},
 doi = {10.1007/s10990-006-0480-6},
 acmid = {1187999},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Call-by-name, Call-by-push-value, Call-by-value, Computational effect, Lambda-calculus, Monad},
} 

@article{Chargueraud:2019:VCA:3315672.3315720,
 author = {Chargu{\'e}raud, Arthur and Pottier, Fran\c{c}ois},
 title = {Verifying the Correctness and Amortized Complexity of a Union-Find Implementation in Separation Logic with Time Credits},
 journal = {J. Autom. Reason.},
 issue_date = {March     2019},
 volume = {62},
 number = {3},
 month = mar,
 year = {2019},
 issn = {0168-7433},
 pages = {331--365},
 numpages = {35},
 url = {https://doi.org/10.1007/s10817-017-9431-7},
 doi = {10.1007/s10817-017-9431-7},
 acmid = {3315720},
 publisher = {Springer-Verlag},
 address = {Berlin, Heidelberg},
 keywords = {Separation logic, Time credits, Union-Find, Verification},
} 

@InProceedings{10.1007/978-3-030-17184-1_1,
author="M{\'e}vel, Glen
and Jourdan, Jacques-Henri
and Pottier, Fran{\c{c}}ois",
editor="Caires, Lu{\'i}s",
title="Time Credits and Time Receipts in Iris",
booktitle="Programming Languages and Systems",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="3--29",
abstract="We present a machine-checked extension of the program logic Iris with time credits and time receipts, two dual means of reasoning about time. Whereas time credits are used to establish an upper bound on a program's execution time, time receipts can be used to establish a lower bound. More strikingly, time receipts can be used to prove that certain undesirable events---such as integer overflows---cannot occur until a very long time has elapsed. We present several machine-checked applications of time credits and time receipts, including an application where both concepts are exploited.",
isbn="978-3-030-17184-1"
}

@InProceedings{10.1007/978-3-319-89884-1_19,
author="Gu{\'e}neau, Arma{\"e}l
and Chargu{\'e}raud, Arthur
and Pottier, Fran{\c{c}}ois",
editor="Ahmed, Amal",
title="A Fistful of Dollars: Formalizing Asymptotic Complexity Claims via Deductive Program Verification",
booktitle="Programming Languages and Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="533--560",
abstract="We present a framework for simultaneously verifying the functional correctness and the worst-case asymptotic time complexity of higher-order imperative programs. We build on top of Separation Logic with Time Credits, embedded in an interactive proof assistant. We formalize the O notation, which is key to enabling modular specifications and proofs. We cover the subtleties of the multivariate case, where the complexity of a program fragment depends on multiple parameters. We propose a way of integrating complexity bounds into specifications, present lemmas and tactics that support a natural reasoning style, and illustrate their use with a collection of examples.",
isbn="978-3-319-89884-1"
}

@inproceedings{Danner:2013:SCA:2428116.2428123,
 author = {Danner, Norman and Paykin, Jennifer and Royer, James S.},
 title = {A Static Cost Analysis for a Higher-order Language},
 booktitle = {Proceedings of the 7th Workshop on Programming Languages Meets Program Verification},
 series = {PLPV '13},
 year = {2013},
 isbn = {978-1-4503-1860-0},
 location = {Rome, Italy},
 pages = {25--34},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2428116.2428123},
 doi = {10.1145/2428116.2428123},
 acmid = {2428123},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {automated theorem proving, certified bounds, higher-order complexity},
} 

  @article{Danner:2015:DCS:2858949.2784749,
 author = {Danner, Norman and Licata, Daniel R. and Ramyaa, Ramyaa},
 title = {Denotational Cost Semantics for Functional Languages with Inductive Types},
 journal = {SIGPLAN Not.},
 issue_date = {September 2015},
 volume = {50},
 number = {9},
 month = aug,
 year = {2015},
 issn = {0362-1340},
 pages = {140--151},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2858949.2784749},
 doi = {10.1145/2858949.2784749},
 acmid = {2784749},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Semi-automatic complexity analysis},
} 

@inproceedings{Danner:2015:DCS:2784731.2784749,
 author = {Danner, Norman and Licata, Daniel R. and Ramyaa, Ramyaa},
 title = {Denotational Cost Semantics for Functional Languages with Inductive Types},
 booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP 2015},
 year = {2015},
 isbn = {978-1-4503-3669-7},
 location = {Vancouver, BC, Canada},
 pages = {140--151},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2784731.2784749},
 doi = {10.1145/2784731.2784749},
 acmid = {2784749},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Semi-automatic complexity analysis},
} 

@article{BENZINGER200479,
title = "Automated higher-order complexity analysis",
journal = "Theoretical Computer Science",
volume = "318",
number = "1",
pages = "79 - 103",
year = "2004",
note = "Implicit Computational Complexity",
issn = "0304-3975",
doi = "https://doi.org/10.1016/j.tcs.2003.10.022",
url = "http://www.sciencedirect.com/science/article/pii/S0304397503005279",
author = "Ralph Benzinger",
keywords = "Computational complexity analysis, Functional programs, Higher-order complexity, Program synthesis, Feasible mathematics",
abstract = "This paper describes the automated complexity analysis (ACA) system for automated higher-order complexity analysis of functional programs synthesized with the NUPRL proof development system. We introduce a general framework for defining models of computational complexity for functional programs based on an annotation of a given operational language semantics. Within this framework, we use type decomposition and polynomialization to express the complexity of higher-order terms. Symbolic interpretation of open terms automates complexity analysis, which involves generating and solving higher-order recurrence equations. Finally, the use of the ACA system is demonstrated by analyzing three different implementations of the pigeonhole principle."
}


@inproceedings{Avanzini:2015:ACF:2784731.2784753,
 author = {Avanzini, Martin and Dal Lago, Ugo and Moser, Georg},
 title = {Analysing the Complexity of Functional Programs: Higher-order Meets First-order},
 booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP 2015},
 year = {2015},
 isbn = {978-1-4503-3669-7},
 location = {Vancouver, BC, Canada},
 pages = {152--164},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2784731.2784753},
 doi = {10.1145/2784731.2784753},
 acmid = {2784753},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Defunctionalisation, term rewriting, termination and resource analysis},
} 

@article{DBLP:journals/corr/abs-1104-0193,
  author    = {Ugo Dal Lago and
               Marco Gaboardi},
  title     = {Linear Dependent Types and Relative Completeness},
  journal   = {Logical Methods in Computer Science},
  volume    = {8},
  number    = {4},
  year      = {2011},
  url       = {https://doi.org/10.2168/LMCS-8(4:11)2012},
  doi       = {10.2168/LMCS-8(4:11)2012},
  timestamp = {Tue, 14 May 2019 16:31:17 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1104-0193},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{DALLAGO201477,
title = "Linear dependent types in a call-by-value scenario",
journal = "Science of Computer Programming",
volume = "84",
pages = "77 - 100",
year = "2014",
note = "Principles and Practice of Declarative Programming (PPDP 2012)",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2013.07.010",
url = "http://www.sciencedirect.com/science/article/pii/S0167642313001676",
author = "Ugo Dal Lago and Barbara Petit",
keywords = "Complexity analysis, Implicit computational complexity, Type systems, Linear logic",
abstract = "Linear dependent types were introduced recently (Dal Lago and Gaboardi, 2012) [26] as a formal system that allows to precisely capture both the extensional behavior and the time complexity of λ-terms, when the latter are evaluated by Krivine’s abstract machine. In this work, we show that the same paradigm can be applied to call-by-value computation. A system of linear dependent types for Plotkin’s PCF  is introduced, called dℓPCFV, whose types reflect the complexity of evaluating terms in the CEK  machine. dℓPCFV  is proved to be sound, but also relatively complete: every true statement about the extensional and intentional behavior of terms can be derived, provided all true index term inequalities can be used as assumptions."
}

@inproceedings{Hofmann:2003:SPH:604131.604148,
 author = {Hofmann, Martin and Jost, Steffen},
 title = {Static Prediction of Heap Space Usage for First-order Functional Programs},
 booktitle = {Proceedings of the 30th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '03},
 year = {2003},
 isbn = {1-58113-628-5},
 location = {New Orleans, Louisiana, USA},
 pages = {185--197},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/604131.604148},
 doi = {10.1145/604131.604148},
 acmid = {604148},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {functional programming, garbage collection, heap, program analysis, resources},
} 

@article{Jost:2010:SDQ:1707801.1706327,
 author = {Jost, Steffen and Hammond, Kevin and Loidl, Hans-Wolfgang and Hofmann, Martin},
 title = {Static Determination of Quantitative Resource Usage for Higher-order Programs},
 journal = {SIGPLAN Not.},
 issue_date = {January 2010},
 volume = {45},
 number = {1},
 month = jan,
 year = {2010},
 issn = {0362-1340},
 pages = {223--236},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/1707801.1706327},
 doi = {10.1145/1707801.1706327},
 acmid = {1706327},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {functional programming, resource analysis, types},
} 

@article{Eberl:2017:PDC:3058140.3058145,
 author = {Eberl, Manuel},
 title = {Proving Divide and Conquer Complexities in Isabelle/HOL},
 journal = {J. Autom. Reason.},
 issue_date = {April     2017},
 volume = {58},
 number = {4},
 month = apr,
 year = {2017},
 issn = {0168-7433},
 pages = {483--508},
 numpages = {26},
 url = {https://doi.org/10.1007/s10817-016-9378-0},
 doi = {10.1007/s10817-016-9378-0},
 acmid = {3058145},
 publisher = {Springer-Verlag New York, Inc.},
 address = {Secaucus, NJ, USA},
 keywords = {Akra---Bazzi, Complexity, Divide and Conquer algorithms, Isabelle/HOL, Landau symbols, Master Theorem, Recurrences},
} 

@InProceedings{10.1007/978-3-319-94205-6_35,
author="Zhan, Bohua
and Haslbeck, Maximilian P. L.",
editor="Galmiche, Didier
and Schulz, Stephan
and Sebastiani, Roberto",
title="Verifying Asymptotic Time Complexity of Imperative Programs in Isabelle",
booktitle="Automated Reasoning",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="532--548",
abstract="We present a framework in Isabelle for verifying asymptotic time complexity of imperative programs. We build upon an extension of Imperative HOL and its separation logic to include running time. Our framework is able to handle advanced techniques for time complexity analysis, such as the use of the Akra--Bazzi theorem and amortized analysis. Various automation is built and incorporated into the auto2 prover to reason about separation logic with time credits, and to derive asymptotic behaviour of functions. As case studies, we verify the asymptotic time complexity (in addition to functional correctness) of imperative algorithms and data structures such as median of medians selection, Karatsuba's algorithm, and splay trees.",
isbn="978-3-319-94205-6"
}

